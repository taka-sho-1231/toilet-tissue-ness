name: Create Release

on:
  push:
    branches:
      - master  # Triggered when changes are pushed to master branch

permissions:
  contents: write  # Required to create releases

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to generate changelog

      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags
          # Get the most recent tag
          latest_tag=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "")
          if [ -z "$latest_tag" ]; then
            echo "No tag found on this commit. Skipping release creation."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Latest tag: $latest_tag"
          fi

      - name: Get previous tag
        id: prev_tag
        if: steps.latest_tag.outputs.skip != 'true'
        run: |
          # Get the second most recent tag (previous release)
          prev_tag=$(git tag --sort=-v:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sed -n '2p')
          if [ -z "$prev_tag" ]; then
            echo "No previous tag found, using initial commit"
            prev_tag=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "prev_tag=$prev_tag" >> $GITHUB_OUTPUT
          echo "Previous tag: $prev_tag"

      - name: Generate changelog
        id: changelog
        if: steps.latest_tag.outputs.skip != 'true'
        run: |
          current_tag="${{ steps.latest_tag.outputs.latest_tag }}"
          prev_tag="${{ steps.prev_tag.outputs.prev_tag }}"
          
          echo "Generating changelog from $prev_tag to $current_tag"
          
          # Generate changelog with commit messages
          changelog=$(git log $prev_tag..$current_tag --pretty=format:"- %s (%h)" --no-merges)
          
          # Save to file for multiline handling
          echo "$changelog" > changelog.txt
          
          echo "Generated changelog:"
          cat changelog.txt

      - name: Create Release
        if: steps.latest_tag.outputs.skip != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.latest_tag.outputs.latest_tag }}
          release_name: Release ${{ steps.latest_tag.outputs.latest_tag }}
          body_path: changelog.txt
          draft: false
          prerelease: false
